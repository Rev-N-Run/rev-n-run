@startuml
skinparam classAttributeIconSize 0

abstract class Game {
    + ApplicationAdapter()
    + create()
    + resize(width: int, height: int)
    + render()
    + pause()
    + resume()
    + dispose()
    + setScreen(screen: Screen)
    + getScreen() : Screen
}


class RevNRun extends Game {
    - batch: SpriteBatch
    - shapeRenderer: ShapeRenderer
    - viewport: Viewport
    - camera: Camera

    + create()
    + render()
    + resize()
}

package controllers {
    package screens {
        class ScreenAdapter {
            + ScreenAdapter()
            + create()
            + resize(width: int, height: int)
            + render(delta: float)
            + pause()
            + resume()
            + dispose()
        }

        abstract class ScreenController extends ScreenAdapter {
            + ScreenController(game: Game)
            + resize(width: int, height: int)
        }

        class MainMenuController extends ScreenController {
            + MainMenuController(game: Game, batch: SpriteBatch,
                camera: Camera, viewport: Viewport)
            + render()
        }

        class GamePlayController extends ScreenController {
            + GamePlayController(game: Game, batch: SpriteBatch,
                camera: Camera, viewport: Viewport)
            + render()
        }
    }

    package model_controllers {
        abstract class ModelController {
            + execute()
        }

        class CameraController extends ModelController {

        }

        class GameController extends ModelController {

        }
    }

    package input {
        interface InputHelper {
            + isKeyPressed(int keycode): boolean
        }

        class LibGDXInputHelper implements InputHelper {

        }

        class InputHandler {

        }
    }
}

package views {
    abstract class View {
        # viewport: Viewport
        # camera: Camera
        # batch: SpriteBatch

        + {abstract} render()
        + resize(width: int, height: int)
        + updateCamera()
    }

    class MainMenuView extends View{
        +render()
    }

    class GamePlayView extends View {
        +render()
    }
}

package models {
    package entities {
        class Car {
            - name: String
            - maxSpeed: int
        }
    }

    package persistence {
        interface Repository {
            + findById(id: String): Optional<T>
            + findAll(): List<T>
            + save(entity: T)
            + delete(entity: T)
        }

        interface PlayerRepository extends Repository {
            + findByLevel(level: int): List<Player>
        }

        class JsonPlayerRepository implements PlayerRepository {

        }
    }

    package managers {
        interface Manager {

        }

        class GameManager implements Manager{

        }

        class CarManager implements Manager {

        }

    }
}

package core {
    enum GameState {
        MAIN_MENU
        GAME_PLAY
    }
}

RevNRun "1\ngame" --> "1\ncurrentController" ScreenController
ScreenController -up-> "1" View : view
ScreenController --> "1" InputHandler : input
InputHandler --> InputHelper : inputHelper
ScreenController o-- "0..*" ModelController
ModelController o--> "0..*" Repository
ModelController o-- "0..*" Manager

input -[hidden]right- screens
models -[hidden]left- controllers

@enduml